[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev dev flow: recs and gotchas",
    "section": "",
    "text": "Here is what “Hello world” notebook looks like (app.ipynb):\n\n# My app\n\nThis is my app. There are many like it, but this one is mine. My app is my best friend. It is my life. I must master it as I must master my life.\n\n#| default_exp app\n\n#| export\ndef foo(): pass\n\n#| hide\nimport nbdev; nbdev.nbdev_export()",
    "crumbs": [
      "nbdev dev flow: recs and gotchas"
    ]
  },
  {
    "objectID": "index.html#nbdev-hello-world",
    "href": "index.html#nbdev-hello-world",
    "title": "nbdev dev flow: recs and gotchas",
    "section": "",
    "text": "Here is what “Hello world” notebook looks like (app.ipynb):\n\n# My app\n\nThis is my app. There are many like it, but this one is mine. My app is my best friend. It is my life. I must master it as I must master my life.\n\n#| default_exp app\n\n#| export\ndef foo(): pass\n\n#| hide\nimport nbdev; nbdev.nbdev_export()",
    "crumbs": [
      "nbdev dev flow: recs and gotchas"
    ]
  },
  {
    "objectID": "index.html#basic-recipe-for-happiness-with-nbdev",
    "href": "index.html#basic-recipe-for-happiness-with-nbdev",
    "title": "nbdev dev flow: recs and gotchas",
    "section": "Basic recipe for happiness with nbdev",
    "text": "Basic recipe for happiness with nbdev\nThe easiest way to achieve happiness and peace of mind while using nbdev is to Save  + Restart + Run All. This will make sure that the outputs are up to date and you are pulling fresh versions of other modules in your package. Bonus points for using a keyboard shortcut to streamline the process. Here’s an example with Restart Kernel and Rerun all mapped to Cmd + Shift + R\n\n\n\nsave restart and run all\n\n\n\nRemember: nbdev_export reads notebooks from the file system - make sure you save before you export",
    "crumbs": [
      "nbdev dev flow: recs and gotchas"
    ]
  },
  {
    "objectID": "index.html#guarding-against-shipping-broken-lib",
    "href": "index.html#guarding-against-shipping-broken-lib",
    "title": "nbdev dev flow: recs and gotchas",
    "section": "Guarding against shipping broken lib",
    "text": "Guarding against shipping broken lib\nIf you are not careful with #| export, you might ship broken code. Let’s say your notebook has these 2 code cells\ndef bar(): return \"bar\"\nand\n#| export\n\ndef foo(): return bar()\nYou can test your function foo in the same notebook by invoking it\nfoo()\nand it returns \"bar\" as expected. nbdev_export runs OK. If we now inspect output python module, we will see smth strange:\n# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/foo.ipynb.\n\n# %% auto 0\n__all__ = ['foo']\n\n# %% ../nbs/foo.ipynb 2\ndef foo():\n    return bar()\nfoo is there but bar is not. it’s because we did not export bar using |# export annotation. This can get pretty frustrating especially if you are just starting with nbdev. An easy way to guard against shipping this broken code to production is to integrate pyflakes in your CI workflow:\npyflakes ./output_dir\nThis will produce the following error report:\n./output_dir/foo.py:8:12: undefined name 'bar'\nWe can also add a custom helper to run these checks automatically in your dev flow:\n#| export \n\nimport pyflakes.api, nbdev.config\n\nclass AggressiveReporter:\n    def unexpectedError(self, filename, msg): raise Exception(f\"({filename}) Unexpected error: {msg}\")\n    def syntaxError(self, filename, msg, lineno, offset, text): raise Exception(f\"({filename}:{lineno}:{offset}) Syntax error: {msg} {text}\")\n    def flake(self, message): raise Exception(f\"{message}\")\n\ndef check(): pyflakes.api.checkRecursive([nbdev.config.get_config().lib_path], AggressiveReporter())\nUpdate each of your nb footer with\n#| hide\n\nimport nbdev\nfrom nbdev_gymnastics.check import check\n\nnbdev.nbdev_export()\ncheck()\n\nComment from Jeremy Howard regarding pyflakes usage\n\nInstead of using pyflakes, I recommend having your index.ipynb show examples of how to use all modules defined in your lib. If any of them aren’t working, nbdev_prepare will tell you so. pyflakes is fine, but it’s not a substitute for proper tests. And if you have proper tests, then you don’t need pyflakes here! That’s why nbdev comes with CI enabled OOTB – to help ensure you’ve got working tests",
    "crumbs": [
      "nbdev dev flow: recs and gotchas"
    ]
  },
  {
    "objectID": "index.html#gotchas",
    "href": "index.html#gotchas",
    "title": "nbdev dev flow: recs and gotchas",
    "section": "Gotchas",
    "text": "Gotchas\n\nEmpty notebook\nLet’s say you are working on your app.ipynb. Meanwhile, you add another module by creating foo.ipynb and leave it empty.\nWhen rerunning all your cells inside app.ipynb, you get a strange error along these lines:\n\n354 except StopIteration as err:\n–&gt; 355 raise JSONDecodeError(“Expecting value”, s, err.value) from None\n\nIt might have nothing to do with app.ipynb but actually point to the issue with foo.ipynb being empty. The following code block at the very bottom of app.ipynb runs nbdev_export that processes ALL the notebooks in your project and NOT just the current one:\nimport nbdev; nbdev.nbdev_export()",
    "crumbs": [
      "nbdev dev flow: recs and gotchas"
    ]
  },
  {
    "objectID": "check.html",
    "href": "check.html",
    "title": "Check",
    "section": "",
    "text": "source\n\ncheck\n\n check ()\n\n\nsource\n\n\nAggressiveReporter\n\n AggressiveReporter ()\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "Check"
    ]
  },
  {
    "objectID": "foo.html",
    "href": "foo.html",
    "title": "nbdev_gymnastics",
    "section": "",
    "text": "source\n\nbar\n\n bar ()\n\n\nsource\n\n\nfoo\n\n foo ()\n\n\nfoo()\n\n'bar'",
    "crumbs": [
      "foo.html"
    ]
  },
  {
    "objectID": "app.html",
    "href": "app.html",
    "title": "My app",
    "section": "",
    "text": "source\n\nfoo\n\n foo ()",
    "crumbs": [
      "My app"
    ]
  }
]